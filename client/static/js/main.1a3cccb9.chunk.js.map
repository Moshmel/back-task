{"version":3,"sources":["api-service.js","App.js","serviceWorker.js","index.js"],"names":["register","data","axios","post","getUsers","get","App","useState","username","setUsername","password","setPassword","nickname","setNickname","status","setStatus","userList","setUserList","useEffect","a","ApiService","res","handleSubmit","e","preventDefault","user","create_time","Date","now","console","log","className","onSubmit","placeholder","type","name","onChange","target","value","required","map","item","i","key","_id","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"6RAcoB,OACVA,SATN,SAAkBC,GACd,OAAOC,IAAMC,KAAN,UAHT,GAGS,cAA+BF,IAQ3BG,SALb,WACE,OAAOF,IAAMG,IAAN,UAPT,GAOS,uB,MC8GAC,MArHf,WAAgB,IAAD,EACmBC,mBAAS,IAD5B,mBACNC,EADM,KACIC,EADJ,OAEmBF,mBAAS,IAF5B,mBAENG,EAFM,KAEIC,EAFJ,OAGmBJ,mBAAS,IAH5B,mBAGNK,EAHM,KAGIC,EAHJ,OAIeN,mBAAS,IAJxB,mBAINO,EAJM,KAIEC,EAJF,OAKmBR,mBAAS,IAL5B,mBAKNS,EALM,KAKIC,EALJ,KAQbC,qBAAU,WAAM,4CACd,4BAAAC,EAAA,sEACoBC,EAAWhB,WAD/B,OACQiB,EADR,OAEEJ,EAAYI,EAAIpB,MAFlB,4CADc,uBAAC,WAAD,wBAKdG,KACC,IAEH,IAAMkB,EAAY,uCAAG,WAAOC,GAAP,eAAAJ,EAAA,sDACnBI,EAAEC,iBACIC,EAAO,CAAEjB,WAAUI,WAAUF,WAAUI,SAAOY,YAAYC,KAAKC,OACrE,IACcR,EAAWpB,SAASyB,GAChChB,EAAY,IACZE,EAAY,IACZI,EAAU,IACVF,EAAY,IAEZ,MAAOU,GACPM,QAAQC,IAAI,sBAXK,2CAAH,sDAclB,OACE,yBAAKC,UAAU,OACb,6BAASA,UAAU,QACjB,yBAAKA,UAAU,mCACb,yBAAKA,UAAU,iBACb,wBAAIA,UAAU,4BAAd,cACA,yBAAKA,UAAU,uBACb,0BAAMA,UAAU,SAASC,SAAUV,GACjC,2BACEW,YAAY,WACZF,UAAU,gBACVG,KAAK,OACLC,KAAK,WACLC,SAAU,SAACb,GAAD,OAAOV,EAAYU,EAAEc,OAAOC,QACtCA,MAAO1B,EACP2B,UAAQ,IAEV,2BACEN,YAAY,WACZF,UAAU,gBACVI,KAAK,YACLD,KAAK,OACLE,SAAU,SAACb,GAAD,OAAOd,EAAYc,EAAEc,OAAOC,QACtCA,MAAO9B,EACP+B,UAAQ,IAEV,2BACEN,YAAY,WACZF,UAAU,gBACVG,KAAK,WACLC,KAAK,WACLC,SAAU,SAACb,GAAD,OAAOZ,EAAYY,EAAEc,OAAOC,QACtCA,MAAO5B,EACP6B,UAAQ,IAGV,2BACEN,YAAY,SACZF,UAAU,gBACVG,KAAK,SACLC,KAAK,SACLC,SAAU,SAACb,GAAD,OAAOR,EAAUQ,EAAEc,OAAOC,QACpCA,MAAOxB,EACPyB,UAAQ,IAGV,yBAAKR,UAAU,uBACb,4BAAQG,KAAK,SAASH,UAAU,gBAAhC,gBASZ,6BAASA,UAAU,aACjB,wBAAIA,UAAU,gBAAd,cAEGf,GACM,2BAAOe,UAAU,SACjB,4BACE,kCACA,wCACA,wCACA,wCACA,yCACA,uCAEJf,EAASwB,KAAI,SAACC,EAAMC,GAAP,OACZ,wBAAIC,IAAKD,GACP,4BAAKD,EAAKG,IAAV,KACA,4BAAKH,EAAK7B,UACV,4BAAK6B,EAAKjC,UACV,4BAAKiC,EAAK/B,UACV,4BAAK+B,EAAKf,aACV,4BAAKe,EAAK3B,gBClGR+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjC,QAAQiC,MAAMA,EAAMC,c","file":"static/js/main.1a3cccb9.chunk.js","sourcesContent":["import axios from \"axios\";\r\nconst URL =\r\n  process.env.NODE_ENV === \"development\"\r\n    ? \"http://localhost:3001\"\r\n    : \"\";\r\n\r\n    function register(data) {\r\n        return axios.post(`${URL}/api/users`, data);\r\n      }\r\n\r\n      function getUsers(){\r\n        return axios.get(`${URL}/api/admin/users`);\r\n      }\r\n\r\n      export default{\r\n          register,getUsers\r\n      }","import React, { useState, useEffect } from \"react\";\nimport ApiService from \"./api-service\";\nimport \"./App.scss\";\n\nfunction App() {\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [nickname, setNickname] = useState(\"\");\n  const [status, setStatus] = useState(\"\");\n  const [userList, setUserList] = useState(\"\");\n\n\n  useEffect(() => {\n    async function getUsers() {\n      const res = await ApiService.getUsers();\n      setUserList(res.data);\n    }\n    getUsers();\n  }, []);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    const user = { username, nickname, password, status,create_time:Date.now() };\n    try {\n      const res = ApiService.register(user);\n      setUsername('');\n      setPassword('');\n      setStatus('');\n      setNickname('');\n\n    } catch (e) {\n      console.log(\"error in  register\");\n    }\n  };\n  return (\n    <div className=\"App\">\n      <section className=\"join\">\n        <div className=\"fade-in-modal u-modal-container\">\n          <div className=\"join__wrapper\">\n            <h1 className=\"join__title t-sub-header\"> Sign-up! </h1>\n            <div className=\"join__input-wrapper\">\n              <form className=\"u-form\" onSubmit={handleSubmit}>\n                <input\n                  placeholder=\"Nickname\"\n                  className=\"u-input-style\"\n                  type=\"text\"\n                  name=\"nickname\"\n                  onChange={(e) => setNickname(e.target.value)}\n                  value={nickname}\n                  required\n                />\n                <input\n                  placeholder=\"Username\"\n                  className=\"u-input-style\"\n                  name=\"full-name\"\n                  type=\"text\"\n                  onChange={(e) => setUsername(e.target.value)}\n                  value={username}\n                  required\n                />\n                <input\n                  placeholder=\"Password\"\n                  className=\"u-input-style\"\n                  type=\"password\"\n                  name=\"password\"\n                  onChange={(e) => setPassword(e.target.value)}\n                  value={password}\n                  required\n                />\n\n                <input\n                  placeholder=\"status\"\n                  className=\"u-input-style\"\n                  type=\"number\"\n                  name=\"status\"\n                  onChange={(e) => setStatus(e.target.value)}\n                  value={status}\n                  required\n                />\n\n                <div className=\"join__btn-container\">\n                  <button type=\"submit\" className=\"u-submit-btn\">\n                    Finish\n                  </button>\n                </div>\n              </form>\n            </div>\n          </div>\n        </div>\n      </section>\n      <section className=\"user-list\">\n        <h1 className=\"t-sub-header\">Users list</h1>\n \n          {userList && (\n                 <table className=\"table\">\n                 <tr>\n                   <th>ID</th>\n                   <th>Nickname</th>\n                   <th>Username</th>\n                   <th>password</th>\n                   <th>Timestamp</th>\n                   <th>Status</th>\n                 </tr>\n              {userList.map((item, i) => (\n                <tr key={i}>\n                  <td>{item._id} </td>\n                  <td>{item.nickname}</td>\n                  <td>{item.username}</td>\n                  <td>{item.password}</td>\n                  <td>{item.create_time}</td>\n                  <td>{item.status}</td>\n                </tr>\n              ))}\n            \n        </table>\n          )}\n      </section>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}